scalar BigDecimal

scalar BigInt

scalar Bytes

"""
Date custom scalar type
"""
scalar Date

type FbeetsApr {
    apr: Float!
}

type GqlBalancePoolApr {
    beetsApr: BigDecimal!
    hasRewardApr: Boolean!
    items: [GqlBalancePoolAprItem!]!
    swapApr: BigDecimal!
    thirdPartyApr: BigDecimal!
    total: BigDecimal!
}

type GqlBalancePoolAprItem {
    apr: BigDecimal!
    subItems: [GqlBalancePoolAprSubItem!]
    title: String!
}

type GqlBalancePoolAprSubItem {
    apr: BigDecimal!
    title: String!
}

input GqlBalancerGetPoolActivitiesInput {
    first: Int!
    poolId: ID!
    sender: String
    skip: Int!
}

type GqlBalancerPool {
    address: Bytes!
    amp: BigInt
    apr: GqlBalancePoolApr!
    baseToken: Bytes
    composition: GqlBalancerPoolComposition!
    createTime: Int!
    expiryTime: BigInt
    factory: Bytes
    farm: GqlBeetsFarm
    farmTotalLiquidity: BigDecimal!
    fees24h: BigDecimal!
    holdersCount: BigInt!
    id: ID!
    isNewPool: Boolean
    linearPools: [GqlBalancerPoolLinearPoolData!]
    lowerTarget: String
    mainIndex: Int
    mainTokens: [String!]
    name: String
    owner: Bytes
    poolType: String
    principalToken: Bytes
    stablePhantomPools: [GqlBalancerPoolStablePhantomPoolData!]
    swapEnabled: Boolean!
    swapFee: BigDecimal!
    swapsCount: BigInt!
    symbol: String!
    tokenRates: [String!]
    tokens: [GqlBalancerPoolToken!]!
    tokensList: [Bytes!]!
    totalLiquidity: BigDecimal!
    totalShares: BigDecimal!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
    totalWeight: BigDecimal
    unitSeconds: BigInt
    upperTarget: String
    volume24h: BigDecimal!
    wrappedIndex: Int
}

type GqlBalancerPool24h {
    address: Bytes!
    id: ID!
    liquidityChange24h: BigDecimal!
    swapFees24h: BigDecimal!
    swapVolume24h: BigDecimal!
    totalLiquidity: BigDecimal!
    totalShares: BigDecimal!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
}

type GqlBalancerPoolActivity {
    amounts: [BigDecimal!]!
    id: ID!
    poolId: String!
    sender: Bytes!
    timestamp: Int!
    tx: Bytes!
    type: GqlBalancerPoolActivityType!
    valueUSD: BigDecimal!
}

enum GqlBalancerPoolActivityType {
    Exit
    Join
}

type GqlBalancerPoolComposition {
    tokens: [GqlBalancerPoolCompositionToken!]!
}

type GqlBalancerPoolCompositionToken {
    address: String!
    balance: BigDecimal!
    decimals: Int!
    nestedTokens: [GqlBalancerPoolCompositionToken!]
    symbol: String!
    valueUSD: BigDecimal!
    weight: BigDecimal
}

type GqlBalancerPoolLinearPoolData {
    address: String!
    balance: String!
    id: ID!
    mainToken: GqlBalancerPoolLinearPoolMainToken!
    mainTokenTotalBalance: String!
    poolToken: String!
    priceRate: String!
    symbol: String!
    totalSupply: String!
    unwrappedTokenAddress: String!
    wrappedToken: GqlBalancerPoolLinearPoolWrappedToken!
}

type GqlBalancerPoolLinearPoolMainToken {
    address: String!
    balance: String!
    decimals: Int!
    index: Int!
    name: String!
    symbol: String!
    totalSupply: String!
}

type GqlBalancerPoolLinearPoolWrappedToken {
    address: String!
    balance: String!
    decimals: Int!
    index: Int!
    name: String!
    priceRate: String!
    symbol: String!
    totalSupply: String!
}

type GqlBalancerPoolSnapshot {
    id: ID!
    liquidityChange24h: BigDecimal!
    poolId: ID!
    swapFees24h: BigDecimal!
    swapVolume24h: BigDecimal!
    timestamp: Int!
    tokens: [GqlBalancerPoolToken!]!
    totalLiquidity: BigDecimal!
    totalShares: BigDecimal!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
}

type GqlBalancerPoolStablePhantomPoolData {
    address: String!
    balance: String!
    id: ID!
    symbol: String!
    tokens: [GqlBalancerPoolToken!]!
    totalSupply: String!
}

type GqlBalancerPoolToken {
    address: String!
    balance: BigDecimal!
    decimals: Int!
    id: ID!
    isBpt: Boolean
    isPhantomBpt: Boolean
    name: String!
    priceRate: BigDecimal!
    symbol: String!
    weight: BigDecimal
}

type GqlBalancerTokenLatestPrice {
    asset: Bytes!
    block: BigInt!
    id: ID!
    price: BigDecimal!
    priceUSD: BigDecimal!
    pricingAsset: Bytes!
}

type GqlBalancerTradePair {
    token0: GqlBalancerTradePairToken!
    token1: GqlBalancerTradePairToken!
}

type GqlBalancerTradePairSnapshot {
    id: ID!
    pair: GqlBalancerTradePair!
    timestamp: Int!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
}

type GqlBalancerTradePairToken {
    address: String!
    symbol: String!
}

type GqlBeetsConfig {
    blacklistedPools: [String!]!
    blacklistedTokens: [String!]!
    boostedPools: [String!]!
    excludedPools: [String!]!
    featuredPools: [String!]!
    homeEducationItems: [GqlBeetsConfigNewsItem!]!
    homeFeaturedPools: [GqlBeetsConfigFeaturedPool!]!
    homeNewsItems: [GqlBeetsConfigNewsItem!]!
    incentivizedPools: [String!]!
    pausedPools: [String!]!
    poolFilters: [GqlBeetsConfigPoolFilterItem!]!
}

type GqlBeetsConfigFeaturedPool {
    description: String
    image: String!
    poolId: String!
}

type GqlBeetsConfigNewsItem {
    description: String!
    image: String!
    publishDate: String!
    title: String!
    url: String!
}

type GqlBeetsConfigPoolFilterItem {
    id: ID!
    pools: [String!]!
    title: String!
}

type GqlBeetsFarm {
    allocPoint: Int!
    block: BigInt!
    hasBeetsRewards: Boolean!
    id: ID!
    lastRewardBlock: BigInt!
    masterChef: GqlBeetsMasterChef!
    pair: Bytes!
    rewardTokens: [GqlBeetsFarmRewardToken!]!
    rewarder: GqlBeetsRewarder
    slpBalance: BigInt!
    timestamp: BigInt!
    userCount: BigInt!
}

type GqlBeetsFarmRewardToken {
    address: String!
    decimals: Int!
    isBeets: Boolean
    rewardPerDay: BigDecimal!
    rewardPerSecond: BigDecimal!
    symbol: String!
    tokenPrice: BigDecimal!
}

type GqlBeetsFarmUser {
    address: Bytes!
    amount: BigInt!
    beetsHarvested: BigInt!
    farmId: ID!
    id: ID!
    pair: Bytes!
    rewardDebt: BigInt!
    timestamp: BigInt!
}

type GqlBeetsMasterChef {
    beetsPerBlock: BigInt!
    id: ID!
    totalAllocPoint: Int!
}

type GqlBeetsProtocolData {
    beetsPrice: BigDecimal!
    circulatingSupply: BigDecimal!
    fbeetsPrice: BigDecimal!
    marketCap: BigDecimal!
    poolCount: BigInt!
    swapFee24h: BigDecimal!
    swapVolume24h: BigDecimal!
    totalLiquidity: BigDecimal!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
}

type GqlBeetsRewarder {
    id: ID!
    rewardPerSecond: BigInt!
    rewardToken: Bytes!
    tokens: [GqlBeetsRewarderToken!]!
}

type GqlBeetsRewarderToken {
    decimals: Int!
    rewardPerSecond: BigInt!
    symbol: String!
    token: Bytes!
    tokenPrice: Float!
}

type GqlBeetsUserPendingAllFarmRewards {
    farmIds: [String!]!
    farms: [GqlBeetsUserPendingFarmRewards!]!
    numFarms: BigInt!
    tokens: [GqlBeetsUserPendingRewardsToken!]!
    totalBalanceUSD: BigDecimal!
}

type GqlBeetsUserPendingFarmRewards {
    balanceUSD: BigDecimal!
    farmId: String!
    tokens: [GqlBeetsUserPendingRewardsToken!]!
}

type GqlBeetsUserPendingRewards {
    farm: GqlBeetsUserPendingAllFarmRewards!
}

type GqlBeetsUserPendingRewardsToken {
    address: Bytes!
    balance: BigDecimal!
    balanceUSD: BigDecimal!
    symbol: String!
}

type GqlBeetsUserPoolData {
    averageApr: BigDecimal!
    averageFarmApr: BigDecimal!
    pools: [GqlBeetsUserPoolPoolData!]!
    totalBalanceUSD: BigDecimal!
    totalFarmBalanceUSD: BigDecimal!
}

type GqlBeetsUserPoolPoolData {
    balance: BigDecimal!
    balanceScaled: BigInt!
    balanceUSD: BigDecimal!
    farmBalanceUSD: BigDecimal!
    hasUnstakedBpt: Boolean
    mainTokens: [GqlBeetsUserPoolTokenData!]
    poolId: String!
    tokens: [GqlBeetsUserPoolTokenData!]!
}

type GqlBeetsUserPoolTokenData {
    address: String!
    balance: String!
    balanceUSD: BigDecimal!
    farmBalanceUSD: BigDecimal!
    symbol: String!
}

scalar GqlBigNumber

type GqlHistoricalTokenPrice {
    address: String!
    prices: [GqlHistoricalTokenPriceEntry!]!
}

type GqlHistoricalTokenPriceEntry {
    price: Float!
    timestamp: String!
}

type GqlLge {
    address: String!
    adminAddress: String!
    adminIsMultisig: Boolean!
    bannerImageUrl: String!
    collateralAmount: String!
    collateralEndWeight: Int!
    collateralStartWeight: Int!
    collateralTokenAddress: String!
    description: String!
    discordUrl: String!
    endDate: String!
    id: ID!
    mediumUrl: String!
    name: String!
    startDate: String!
    swapFeePercentage: String!
    telegramUrl: String!
    tokenAmount: String!
    tokenContractAddress: String!
    tokenEndWeight: Int!
    tokenIconUrl: String!
    tokenStartWeight: Int!
    twitterUrl: String!
    websiteUrl: String!
}

input GqlLgeCreateInput {
    address: String!
    bannerImageUrl: String!
    collateralAmount: String!
    collateralEndWeight: Int!
    collateralStartWeight: Int!
    collateralTokenAddress: String!
    description: String!
    discordUrl: String!
    endDate: String!
    id: ID!
    mediumUrl: String!
    name: String!
    startDate: String!
    swapFeePercentage: String!
    telegramUrl: String!
    tokenAmount: String!
    tokenContractAddress: String!
    tokenEndWeight: Int!
    tokenIconUrl: String!
    tokenStartWeight: Int!
    twitterUrl: String!
    websiteUrl: String!
}

input GqlLgeUpdateInput {
    description: String!
    discordUrl: String!
    id: ID!
    mediumUrl: String!
    name: String!
    telegramUrl: String!
    tokenIconUrl: String!
    twitterUrl: String!
    websiteUrl: String!
}

input GqlSorGetSwapsInput {
    swapAmount: BigDecimal!
    swapOptions: GqlSorSwapOptionsInput!
    swapType: GqlSorSwapType!
    tokenIn: String!
    tokenOut: String!
}

type GqlSorGetSwapsResponse {
    marketSp: String!
    returnAmount: BigDecimal!
    returnAmountConsideringFees: BigDecimal!
    returnAmountFromSwaps: BigDecimal
    routes: [GqlSorSwapRoute!]!
    swapAmount: BigDecimal!
    swapAmountForSwaps: BigDecimal
    swaps: [GqlSorSwap!]!
    tokenAddresses: [String!]!
    tokenIn: String!
    tokenOut: String!
}

type GqlSorSwap {
    amount: String!
    assetInIndex: Int!
    assetOutIndex: Int!
    poolId: String!
    userData: String!
}

input GqlSorSwapOptionsInput {
    forceRefresh: Boolean
    maxPools: Int
    timestamp: Int
}

type GqlSorSwapRoute {
    hops: [GqlSorSwapRouteHop!]!
    share: Float!
    tokenIn: String!
    tokenInAmount: BigDecimal!
    tokenOut: String!
    tokenOutAmount: BigDecimal!
}

type GqlSorSwapRouteHop {
    poolId: String!
    tokenIn: String!
    tokenInAmount: BigDecimal!
    tokenOut: String!
    tokenOutAmount: BigDecimal!
}

enum GqlSorSwapType {
    EXACT_IN
    EXACT_OUT
}

type GqlTokenPrice {
    address: String!
    price: Float!
}

type GqlUserPoolData {
    id: String!
    myFees: GqlBigNumber!
    name: String!
    percentOfPortfolio: Float!
    percentShare: Float!
    poolAddress: String!
    poolId: String!
    priceChange: GqlBigNumber!
    priceChangePercent: Float!
    pricePerShare: GqlBigNumber!
    shares: GqlBigNumber!
    swapFees: GqlBigNumber!
    swapVolume: GqlBigNumber!
    tokens: [GqlUserTokenData!]!
    totalValue: GqlBigNumber!
}

type GqlUserPortfolioData {
    myFees: GqlBigNumber!
    pools: [GqlUserPoolData!]!
    timestamp: Int!
    tokens: [GqlUserTokenData!]!
    totalSwapFees: GqlBigNumber!
    totalSwapVolume: GqlBigNumber!
    totalValue: GqlBigNumber!
}

type GqlUserTokenData {
    address: String!
    balance: GqlBigNumber!
    id: String!
    name: String!
    percentOfPortfolio: Float!
    pricePerToken: GqlBigNumber!
    symbol: String!
    totalValue: GqlBigNumber!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
    cachePortfolioHistoryForDate(date: String!): Boolean!
    clearCacheAtBlock(block: Int!): Boolean!
    clearCachedPools: Boolean!
    clearCachedPortfolioHistories: Boolean!
    lgeCreate(lge: GqlLgeCreateInput!, signature: String!): GqlLge!
    refreshLatestBlockCachedKey: Boolean!
    reloadTokenPrices: Boolean
}

type Query {
    balancerGetPoolActivities(input: GqlBalancerGetPoolActivitiesInput!): [GqlBalancerPoolActivity!]!
    balancerGetTopTradingPairs: [GqlBalancerTradePairSnapshot!]!
    beetsGetBeetsFarms: [GqlBeetsFarm!]!
    beetsGetConfig: GqlBeetsConfig!
    beetsGetProtocolData: GqlBeetsProtocolData!
    beetsGetUserDataForAllFarms: [GqlBeetsFarmUser!]!
    beetsGetUserDataForFarm(farmId: String!): GqlBeetsFarmUser
    beetsGetUserPendingRewards: GqlBeetsUserPendingRewards!
    beetsGetUserPoolData: GqlBeetsUserPoolData!
    blocksGetAverageBlockTime: Float!
    fbeetsGetApr: FbeetsApr!
    gnosisIsUserMultisigWallet: Boolean
    latestPrice(id: ID!): GqlBalancerTokenLatestPrice
    lge(id: ID!): GqlLge!
    lges: [GqlLge!]!
    pool(id: String!): GqlBalancerPool!
    poolGet24hData(poolId: ID!): GqlBalancerPool24h!
    poolSnapshots(poolId: ID!): [GqlBalancerPoolSnapshot!]!
    pools: [GqlBalancerPool!]!
    poolsJSON: [JSON!]!
    poolsPastPools: [GqlBalancerPool!]!
    portfolioGetUserPortfolio: GqlUserPortfolioData!
    portfolioGetUserPortfolioHistory: [GqlUserPortfolioData!]!
    portfolioGetUserPortfolioHistoryAdmin: [GqlUserPortfolioData!]!
    sorGetSwaps(input: GqlSorGetSwapsInput!): GqlSorGetSwapsResponse!
    tokenPriceGetCurrentPrices: [GqlTokenPrice!]!
    tokenPriceGetHistoricalPrices(addresses: [String!]!): [GqlHistoricalTokenPrice!]!
}
